{"version":3,"sources":["webpack://DatasourceConector/webpack/universalModuleDefinition","webpack://DatasourceConector/webpack/bootstrap","webpack://DatasourceConector/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","SuperClass","Handsontable","plugins","BasePlugin","URI","constructor","this","_serialie","prefix","queryStrings","key","push","encodeURIComponent","join","string","undefined","Request","url","method","headers","Content-Type","body","registerPlugin","hotInstance","super","controllerUrl","isEnabled","hot","getSettings","dataSourceConnector","enablePlugin","addHook","isForced","onAfterInit","changes","source","onAfterChange","column","order","onAfterColumnSort","index","amount","onAfterCreateRow","onAfterCreateCol","columns","target","onAfterColumnMove","conditionsStack","onAfterFilter","queryArr","length","operator","getPlugin","conditionCollection","columnTypes","j","conditions","args","colHeaders","k","tempOperator","operatorWithVariable","query","console","log","colMoved","_post","payload","then","uri","_get","response","_loadData","reponse","responseData","data","normalizedData","row","item","columnName","loadData","columnNames","setCellMeta","rowId","updateSettings","disablePlugin","updatePlugin","changeItems","cellMeta","getCellMeta","row_id","col_id","oldValue","newValue","meta","destroy","onDataSend","onData","request","JSON","stringify","_request","reqest","parse","obj","Promise","resolve","reject","xhr","XMLHttpRequest","open","keys","forEach","setRequestHeader","onload","status","statusText","onerror","send","DataSourceConnectorWrapper"],"mappings":"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","file":"datasource-connector.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"DatasourceConector\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DatasourceConector\"] = factory();\n\telse\n\t\troot[\"DatasourceConector\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const DataSourceConnectorWrapper = () => {\r\n  let SuperClass = Handsontable.plugins.BasePlugin\r\n  /**\r\n   * @plugin InternalPluginSkeleton\r\n   * Note: keep in mind, that Handsontable instance creates one instance of the plugin class.\r\n   *\r\n   * @description\r\n   * Blank plugin template. It needs to inherit from the BasePlugin class.\r\n   */\r\n  class DataSourceConnector extends SuperClass {\r\n\r\n    // The argument passed to the constructor is the currently processed Handsontable instance object.\r\n    constructor(hotInstance) {\r\n      super(hotInstance)\r\n      this.controllerUrl = '';\r\n    }\r\n\r\n    /**\r\n     * Checks if the plugin is enabled in the settings.\r\n     */\r\n    isEnabled() {\r\n      this.controllerUrl = this.hot.getSettings().dataSourceConnector.controllerUrl\r\n      return !!this.hot.getSettings().dataSourceConnector;\r\n    }\r\n\r\n    /**\r\n     * The enablePlugin method is triggered on the beforeInit hook. It should contain your initial plugin setup, along with\r\n     * the hook connections.\r\n     * Note, that this method is run only if the statement in the isEnabled method is true.\r\n     */\r\n    enablePlugin() {\r\n\r\n\r\n      // disable build in sort and filter functions\r\n      this.addHook('beforeColumnSort', () => { return false; });\r\n      this.addHook('beforeFilter', () => { return false; })\r\n      this.addHook('afterRender', (isForced) => { });\r\n\r\n      this.addHook('afterInit', () => this.onAfterInit());\r\n      this.addHook('afterChange', (changes, source) => this.onAfterChange(changes, source));\r\n      this.addHook('afterColumnSort', (column, order) => this.onAfterColumnSort(column, order));\r\n\r\n      this.addHook('afterCreateRow', (index, amount, source) => this.onAfterCreateRow(index, amount, source));\r\n      this.addHook('afterCreateCol', (index, amount, source) => this.onAfterCreateCol(index, amount, source));\r\n      this.addHook('afterColumnMove', (columns, target) => this.onAfterColumnMove(columns, target));\r\n      this.addHook('afterFilter', (conditionsStack) => this.onAfterFilter(conditionsStack))\r\n\r\n      // The super method assigns the this.enabled property to true, which can be later used to check if plugin is already enabled.\r\n      super.enablePlugin();\r\n    }\r\n\r\n    onAfterFilter(conditionsStack) {\r\n      let queryArr = []\r\n      if (conditionsStack.length > 0) {\r\n        for (let i = 0; i < conditionsStack.length; i++) {\r\n          operator = this.hot.getPlugin('filters').conditionCollection.columnTypes[conditionsStack[i].column]\r\n          switch (operator) {\r\n            case 'conjunction':\r\n              operator = ['and']\r\n              break;\r\n            case 'disjunction':\r\n              operator = ['or']\r\n              break;\r\n            case 'disjunctionAndVariable':\r\n              operator = ['or', 'and']\r\n              break;\r\n          }\r\n          for (let j = 0; j < conditionsStack[i].conditions.length; j++) {\r\n            if (operator[j]) {\r\n              conditionsStack[i].conditions[j].operator = operator[j]\r\n            }\r\n            if (conditionsStack[i].conditions[j].args.length != 0) {\r\n              if (typeof conditionsStack[i].conditions[j].args[0] === 'string') {\r\n                queryArr.push(\"[\" + this.colHeaders[conditionsStack[i].column] + \"][\" + conditionsStack[i].conditions[j].name + \"]=\" + conditionsStack[i].conditions[j].args[0])\r\n              } else {\r\n                for (let k = 0; k < conditionsStack[i].conditions[j].args[0].length; k++) {\r\n                  queryArr.push(\"[\" + this.colHeaders[conditionsStack[i].column] + \"][\" + conditionsStack[i].conditions[j].name + \"]=\" + conditionsStack[i].conditions[j].args[0][k])\r\n                }\r\n              }\r\n            } else {\r\n              queryArr.push(\"[\" + this.colHeaders[conditionsStack[0].column] + \"][\" + conditionsStack[i].conditions[j].name + \"]=true\")\r\n            }\r\n            if (j < conditionsStack[i].conditions.length - 1) {\r\n              tempOperator = conditionsStack[i].conditions[j].operator || 'and'\r\n              queryArr.push(\"[\" + this.colHeaders[conditionsStack[i].column] + \"][operator]=\" + tempOperator)\r\n            }\r\n          }\r\n          operatorWithVariable = false\r\n        }\r\n        var query = \"?\" + queryArr.join('&')\r\n        console.log(query)\r\n        // this._get(controllerUrl + '/data' + query).then(response => {\r\n        //   this._loadData(response)\r\n        // })\r\n      }\r\n    }\r\n\r\n    onAfterColumnMove(columns, target) {\r\n      var colMoved = {\r\n        columns: columns,\r\n        target: target\r\n      };\r\n      this._post(this.controllerUrl + '/aftercolumnmove', colMoved);\r\n    }\r\n\r\n    onAfterCreateCol(index, amount, source) {\r\n      var payload = {\r\n        index: index,\r\n        amount: amount,\r\n        source: source\r\n      };\r\n      this._post(this.controllerUrl + '/aftercreatecol', payload).then(value => {\r\n        // TODO: setup meta for new created row\r\n        return value;\r\n      });\r\n    }\r\n\r\n    onAfterCreateRow(index, amount, source) {\r\n      var payload = {\r\n        index: index,\r\n        amount: amount,\r\n        source: source\r\n      };\r\n      this._post(this.controllerUrl + '/aftercreaterow', payload).then(value => {\r\n        // TODO: setup meta for new created row\r\n        return value;\r\n      });\r\n    }\r\n\r\n    onAfterColumnSort(column, order) {\r\n      let uri = new URI({ column: this.colHeaders[column], order: order });\r\n      this._get(controllerUrl + \"/aftercolumnsort\" + uri.string())\r\n        .then(response => {\r\n          this._loadData(reponse)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Load data and setup all dedicated metadata for backend sync\r\n     * @param {object} response \r\n     */\r\n    _loadData(response) {\r\n      let responseData = response.data\r\n      let normalizedData = []\r\n      for (let row = 0; row < responseData.length; row++) {\r\n        let item = []\r\n        for (let columnName in responseData[row]) {\r\n          item.push(responseData[row][columnName])\r\n        }\r\n        normalizedData.push(item)\r\n      }\r\n\r\n      this.hot.loadData(normalizedData);\r\n\r\n      let columnNames = []\r\n      for (let columnName in responseData[0]) {\r\n        columnNames.push(columnName)\r\n      }\r\n      for (let row = 0; row < responseData.length; row++) {\r\n        for (let column = 0; column < columnNames.length; column++) {\r\n          this.hot.setCellMeta(row, column, \"row_id\", responseData[row][response.rowId]);\r\n          this.hot.setCellMeta(row, column, \"col_id\", columnNames[column]);\r\n        }\r\n      }\r\n    }\r\n\r\n    onAfterInit() {\r\n      this._get(this.controllerUrl + '/settings')\r\n        .then(response => {\r\n          this.hot.updateSettings(response.data)\r\n        })\r\n      this._get(this.controllerUrl + '/data')\r\n        .then(response => {\r\n          this._loadData(response)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * The disablePlugin method is used to disable the plugin. Reset all of your classes properties to their default values here.\r\n     */\r\n    disablePlugin() {\r\n      // The super method takes care of clearing the hook connections and assigning the 'false' value to the 'this.enabled' property.\r\n      super.disablePlugin();\r\n    }\r\n\r\n    /**\r\n     * The updatePlugin method is called on the afterUpdateSettings hook (unless the updateSettings method turned the plugin off).\r\n     * It should contain all the stuff your plugin needs to do to work properly after the Handsontable instance settings were modified.\r\n     */\r\n    updatePlugin() {\r\n\r\n      // The updatePlugin method needs to contain all the code needed to properly re-enable the plugin. In most cases simply disabling and enabling the plugin should do the trick.\r\n      this.disablePlugin();\r\n      this.enablePlugin();\r\n\r\n      super.updatePlugin();\r\n    }\r\n\r\n    /**\r\n     * The afterChange hook callback.\r\n     *\r\n     * @param {Array} changes Array of changes.\r\n     * @param {String} source Describes the source of the change.\r\n     */\r\n    onAfterChange(changes, source) {\r\n      if (changes) {\r\n        let changeItems = [];\r\n        for (let i = 0; i < changes.length; i++) {\r\n          let cellMeta = this.hot.getCellMeta(changes[i][0], changes[i][1])\r\n          let item = {\r\n            row: cellMeta.row_id,\r\n            column: cellMeta.col_id,\r\n            oldValue: changes[i][2],\r\n            newValue: changes[i][3],\r\n            meta: cellMeta\r\n          };\r\n          delete item.meta[\"instance\"];\r\n          changeItems.push(item);\r\n        }\r\n        this._post(this.controllerUrl + '/afterchange', {\r\n          changes: changeItems,\r\n          source: source\r\n        })\r\n      }\r\n    }\r\n\r\n    /**\r\n     * The destroy method should de-assign all of your properties.\r\n     */\r\n    destroy() {\r\n      // The super method takes care of de-assigning the event callbacks, plugin hooks and clearing all the plugin properties.\r\n      super.destroy();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Object} any data send to  \r\n     */\r\n    onDataSend(value) {\r\n      let onData = this.hot.getSettings().dataSourceConnector.onDataSend;\r\n      if (typeof onData === 'function') {\r\n        onData(value)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * make HTTP POST to url with payload data\r\n     * \r\n     * @param {string} url \r\n     * @param {any} data \r\n     */\r\n    _post(url, data) {\r\n\r\n      let request = new Request();\r\n      request.url = url;\r\n      request.method = 'POST';\r\n      request.body = JSON.stringify(data);\r\n\r\n      return this._request(request).then(\r\n        value => {\r\n          this.onDataSend({ reqest: request, response: JSON.parse(value) });\r\n          return JSON.parse(value);\r\n        }\r\n      )\r\n    }\r\n\r\n    /**\r\n     * make HTTP GET call on url\r\n     * \r\n     * @param {string} url \r\n     */\r\n    _get(url) {\r\n\r\n      var request = new Request();\r\n      request.url = url;\r\n\r\n      return this._request(request).then(\r\n        value => {\r\n          this.onDataSend({ reqest: request, response: JSON.parse(value) });\r\n          return JSON.parse(value);\r\n        }\r\n      )\r\n    }\r\n\r\n    /**\r\n     * Send the xhr request to server \r\n     * \r\n     * @param {Reqest} obj Request object\r\n     * @returns {Promise}\r\n     */\r\n    _request(obj) {\r\n      return new Promise((resolve, reject) => {\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(obj.method || \"GET\", obj.url);\r\n        if (obj.headers) {\r\n          Object.keys(obj.headers).forEach(key => {\r\n            xhr.setRequestHeader(key, obj.headers[key]);\r\n          });\r\n        }\r\n        xhr.onload = () => {\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            resolve(xhr.response);\r\n          } else {\r\n            reject(xhr.statusText);\r\n          }\r\n        };\r\n        xhr.onerror = () => reject(xhr.statusText);\r\n        xhr.send(obj.body);\r\n      });\r\n    };\r\n  }\r\n\r\n  class URI {\r\n    constructor(object) {\r\n      this.object = object;\r\n    }\r\n\r\n    _serialie(object, prefix) {\r\n      let queryStrings = [], property;\r\n      for (property in object) {\r\n        if (object.hasOwnProperty(property)) {\r\n          let key = prefix ? prefix + '[' + property + ']' : property;\r\n          let value = object[property];\r\n          queryStrings.push((value !== null && typeof value === 'object') ? this._serialie(value, key) : encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n      }\r\n      return queryStrings.join('&');\r\n    }\r\n\r\n    string() {\r\n      if (this.object === undefined) {\r\n        return '';\r\n      }\r\n      return '?' + this._serialie(this.object)\r\n    }\r\n  }\r\n\r\n  class Request {\r\n    constructor() {\r\n      this.url = '';\r\n      this.method = 'GET';\r\n      this.headers = { 'Content-Type' : 'application/json' };\r\n      this.body = {};\r\n    }\r\n  }\r\n\r\n  // register plugin\r\n  Handsontable.plugins.registerPlugin('DataSourceConnector',DataSourceConnector)\r\n}\r\n\r\nDataSourceConnectorWrapper();"],"sourceRoot":""}